#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void shell(int *items, int count) {
  int i, j, gap, k;
  int x, a[5];

  a[0] = 9; a[1] = 5; a[2] = 3; a[3] = 2; a[4] = 1;

  for (k = 0; k < 5; k++) {
    gap = a[k];
    for (i = gap; i < count; ++i) {
      x = items[i];
      for (j = i - gap; (x < items[j]) && (j >= 0); j = j - gap)
        items[j + gap] = items[j];
      items[j + gap] = x;
    }
  }
}

void qs(int *items, int left, int right) { //вызов функции: qs(items, 0, count-1);
  int i, j;
  int x, y;

  i = left; j = right;

  /* выбор компаранда */
  x = items[(left + right) / 2];

  do {
    while ((items[i] < x) && (i < right)) i++;
    while ((x < items[j]) && (j > left)) j--;

    if (i <= j) {
      y = items[i];
      items[i] = items[j];
      items[j] = y;
      i++; j--;
    }
  } while (i <= j);

  if (left < j) qs(items, left, j);
  if (i < right) qs(items, i, right);
}

int main() {
  int count = 10000; // Количество элементов в массиве
  int *items = malloc(count * sizeof(int)); // Выделяем память для массива

  // Заполняем массив случайными числами
  srand(time(NULL));
  for (int i = 0; i < count; i++) {
    items[i] = rand(); 
  }

  // Время начала сортировки Шелла
  clock_t start_time = clock();
  shell(items, count);
  clock_t end_time = clock();

  // Вычисляем время работы сортировки Шелла
  double shell_time = (double)(end_time - start_time) / CLOCKS_PER_SEC;
  printf("Время работы сортировки Шелла: %lf секундn", shell_time);

  // Сбрасываем массив в исходное состояние
  for (int i = 0; i < count; i++) {
    items[i] = rand();
  }

  // Время начала быстрой сортировки
  start_time = clock();
  qs(items, 0, count - 1);
  end_time = clock();

  // Вычисляем время работы быстрой сортировки
  double qs_time = (double)(end_time - start_time) / CLOCKS_PER_SEC;
  printf("Время работы быстрой сортировки: %lf секунд\n", qs_time);

  free(items); // Освобождаем память, выделенную для массива

  return 0;
}
