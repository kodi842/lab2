#include <stdlib.h>
#include <time.h>
#include <stdio.h>

#define BLOCK_SIZE 64

void multiplyBlock(int** a, int** b, int** result, int i_start, int j_start, int k_start, int block_size, int size) {
    for (int i = i_start; i < i_start + block_size; i++) {
        for (int j = j_start; j < j_start + block_size; j++) {
            for (int k = k_start; k < k_start + block_size; k++) {
                if (i >= size || j >= size || k >= size) {
                    // Обработка ошибки
                    return;
                }
                if (a == NULL || b == NULL || result == NULL) {
                    // Обработка ошибки
                    return;
                }
                result[i][j] += a[i][k] * b[k][j];
            }
        }
    }
}

void multiplyMatrices(int** a, int** b, int** result, int n, int m, int p) {
    for (int i = 0; i < n; i += BLOCK_SIZE) {
        for (int j = 0; j < p; j += BLOCK_SIZE) {
            for (int k = 0; k < m; k += BLOCK_SIZE) {
                multiplyBlock(a, b, result, i, j, k, BLOCK_SIZE, n);
            }
        }
    }
}

int main() {
    int n = 10000, m = 10000, p = 10000; // Размеры матриц по умолчанию
    srand(time(0));

    // Выделение памяти для матриц
    int** a = (int**)malloc(n * sizeof(int*));
    int** b = (int**)malloc(m * sizeof(int*));
    int** result = (int**)malloc(n * sizeof(int*));
    for (int i = 0; i < n; i++) {
        a[i] = (int*)malloc(m * sizeof(int));
        result[i] = (int*)malloc(p * sizeof(int));
        // Инициализация матрицы result нулями
        for (int j = 0; j < p; j++) {
            result[i][j] = 0;
        }
    }
    for (int i = 0; i < m; i++) {
        b[i] = (int*)malloc(p * sizeof(int));
    }

    // Инициализация матриц случайными значениями
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            a[i][j] = rand() % 100;
        }
    }
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < p; j++) {
            b[i][j] = rand() % 100;
        }
    }

    // Измерение времени выполнения
    clock_t start = clock();
    multiplyMatrices(a, b, result, n, m, p);
    clock_t end = clock();

    double time_taken = ((double)(end - start)) / CLOCKS_PER_SEC;
    printf("Время выполнения: %f секунд\n", time_taken);

    // Освобождение памяти
    for (int i = 0; i < n; i++) {
        free(a[i]);
        free(result[i]);
    }
    for (int i = 0; i < m; i++) {
        free(b[i]);
    }
    free(a);
    free(b);
    free(result);

    return 0;
}
