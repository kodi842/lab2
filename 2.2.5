#include <stdio.h>
#include <stdlib.h>
#include <time.h>

// Функция сравнения для qsort
int compare(const void* a, const void* b) {
    return (*(int*)a - *(int*)b);
}

void print_array(int* array, int count) {
    for (int i = 0; i < count; i++) {
        printf("%d ", array[i]);
    }
    printf("\n");
}

void measure_qsort_time(int* items, int count) {
    clock_t start, end;
    double cpu_time_used;

    start = clock();
    qsort(items, count, sizeof(int), compare);
    end = clock();
    cpu_time_used = ((double)(end - start)) / CLOCKS_PER_SEC;

    print_array(items, count);
    printf("Время выполнения qsort: %f секунд\n", cpu_time_used);
}

int main() {
    const int count = 10;
    int items[count];

    // Заполнение массива возрастающей последовательностью
    for (int i = 0; i < count; i++) {
        items[i] = i + 1;
    }
    printf("Массив с возрастающей последовательностью: ");
    print_array(items, count);
    measure_qsort_time(items, count);

    // Заполнение массива убывающей последовательностью
    for (int i = 0; i < count; i++) {
        items[i] = count - i;
    }
    printf("Массив с убывающей последовательностью: ");
    print_array(items, count);
    measure_qsort_time(items, count);

    // Заполнение массива: первая половина - возрастающая, вторая - убывающая
    for (int i = 0; i < count / 2; i++) {
        items[i] = i + 1;
    }
    for (int i = count / 2; i < count; i++) {
        items[i] = count - i + count / 2;
    }
    printf("Массив: первая половина возрастающая, вторая - убывающая: ");
    print_array(items, count);
    measure_qsort_time(items, count);

    return 0;
}
