#include <stdio.h>
#include <stdlib.h>
#include <time.h>

int main(void) {
    // Убедитесь, что буферизация отключена, если необходимо
    // setvbuf(stdin, NULL, _IONBF, 0);
    // setvbuf(stdout, NULL, _IONBF, 0);

    clock_t start = clock();

    int i = 0, j = 0, k;
    int size = 4000; // Размерность матриц

    // Динамическое выделение памяти для матриц
    int** a = (int**)malloc(size * sizeof(int*));
    int** b = (int**)malloc(size * sizeof(int*));
    int** c = (int**)malloc(size * sizeof(int*));

    for (i = 0; i < size; i++) {
        a[i] = (int*)malloc(size * sizeof(int));
        b[i] = (int*)malloc(size * sizeof(int));
        c[i] = (int*)malloc(size * sizeof(int));
    }

    srand(time(NULL));
    for (i = 0; i < size; i++) {
        for (j = 0; j < size; j++) {
            a[i][j] = rand() % 100 + 1;
            b[i][j] = rand() % 100 + 1;
        }
    }

    for (i = 0; i < size; i++) {
        for (j = 0; j < size; j++) {
            c[i][j] = 0;
            for (k = 0; k < size; k++) {
                c[i][j] += a[i][k] * b[k][j];
            }
        }
    }

    clock_t end = clock();
    float cpu_time_used = ((float)(end - start)) / CLOCKS_PER_SEC;
    printf("Для выполнения цикла for потребовалось %f секунды \n", cpu_time_used);

    // Освобождение динамически выделенной памяти
    for (i = 0; i < size; i++) {
        free(a[i]);
        free(b[i]);
        free(c[i]);
    }
    free(a);
    free(b);
    free(c);

    return 0;
}
